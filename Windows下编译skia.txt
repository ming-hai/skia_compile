【修改日期：2024-04-13】
【操作系统：Windows 11 64位版本】
一、准备：
1、安装python v3.7.x（必须是v3，需要添加到Path环境变量）
（1）验证：确保命令行参数中可以访问到python.exe；
（2）在Windows的设置里面，关闭python.exe和python3.exe的"应用执行别名"，否则编译skia的脚本执行有问题；
（3）到python.exe所在目录中，复制一份python.exe，改名为python3.exe: 确保命令行参数中可以访问到python3.exe；
2、安装git，Git（需要添加到Path环境变量，确保命令行参数中可以访问到git.exe）
（1）Git For Windows: 2.44版本
（2）TortoiseGit：2.15版本
3、安装Visual Studio 2022社区版，(在安装的时候需要选择CMake扩展，自带Ninja编译工具）
4、安装LLVM：18.1.1版本
   安装目录：C:\LLVM
   注意事项：安装目录中，不能有空格，否则编译会遇到问题。
5、获取skia源码及相关依赖：
（0）建立目录：D:\develop\skia
（1）cd /d D:\develop\skia
（2）git clone https://github.com/google/skia.git
     更新的代码日期：2024-04-13，对应的git库SHA-1: 293de35a9d1e046bf919f32ec6eb693f82ee4df9
（3）更新修改代码：
     1) 解压Skia.2024-04-13.diff.zip，将解压后的文件，覆盖D:\develop\skia\skia目录中的所有同名文件。
        注意事项：该修改的代码是基于库的SHA-1: 293de35a9d1e046bf919f32ec6eb693f82ee4df9代码修改，如果不是这个版本的代码，直接覆盖可能有问题，需要手工修改；
     2) 修改代码解决的问题：
        1. 修改DEPS、tools/git-sync-deps：解决部分第三方依赖库获取不到源码的问题；
        2. 修改部分其他源码：解决LLVM编译生成的lib，使用VS链接生成可执行程序后，运行时崩溃问题。
（4）更新依赖代码：切换到skia目录，执行脚本（如果遇到github网络错误，需要反复执行，直到成功为止）
   > cd /d D:\develop\skia\skia
   > python tools/git-sync-deps
   注意事项：zlib是google优化版本的，不是官方版本的，需要下载对应的版本，否则有编译错误。

二、编译gn.exe（编译skia源码时需要用到gn.exe；编译生成gn.exe时需要用到Ninja编译工具）
1、下载源码：https://github.com/timniederhausen/gn.git
    > cd /d D:\develop\skia
    > git clone https://github.com/timniederhausen/gn.git
2、编译gn（注意：vs 2022 已经带了ninja.exe，在安装的时候选择了CMake扩展）:
（1）首先进入vs 2022的命令行编译环境（x64 Native Tools Command Prompt for VS 2022）
    > cd /d D:\develop\skia\gn
（2）由于源代码直接编译有错误，需要进行一些修改：
     > 修改文件：build\build_win.ninja.template：
       将“/showIncludes”去掉，从而去掉编译过程大量include提示，有利于发现错误信息
       添加/wd4819，以避免编译错误：（实际有编译错误的文件是：gn\src\gn\escape.h）
    > python build/gen.py
    > ninja -C out
    > 编译完成后，将out\gn.exe 复制到 D:\develop\skia\skia\bin\ 目录中，编译过程中要用到。

三、编译skia（可选Visual Studio 2022 或 LLVM）
1、 > 首先进入vs 2022的命令行编译环境（x64 Native Tools Command Prompt for VS 2022）
2、 > cd /d D:\develop\skia\skia
3、使用LLVM编译(可选)
（1）编译skia静态库(Release版，官方版，最小依赖，生成使用Visual Studio 2022工程)
   > .\bin\gn.exe gen out/ReleaseLLVM --ide="vs2022" --sln="skia" --args="cc=\"clang\" cxx=\"clang++\" clang_win=\"C:/LLVM\" clang_win_version="16" is_official_build=true skia_use_system_libpng=false skia_use_system_libjpeg_turbo=false skia_use_system_zlib=false skia_use_icu=false skia_use_expat=false skia_use_libwebp_decode=false skia_use_libwebp_encode=false skia_use_xps=false skia_enable_pdf=false is_debug=false"
   > ninja -C out/ReleaseLLVM

（2）编译skia静态库(Debug版，非官方版，完整，生成使用Visual Studio 2022工程)
   > .\bin\gn.exe gen out/DebugLLVM --ide="vs2022" --sln="skia" --args="cc=\"clang\" cxx=\"clang++\" clang_win=\"C:/LLVM\" clang_win_version="16" is_debug=true extra_cflags=[\"/MTd\"]"
   > ninja -C out/DebugLLVM

4、使用Visual Studio 2022编译(可选)  
（1）编译skia静态库(使用Visual Studio 2022，Release版本，官方版，最小依赖，生成使用Visual Studio 2022工程)
   > .\bin\gn.exe gen out/Release --ide="vs2022" --sln="skia" --args="is_official_build=true skia_use_system_libpng=false skia_use_system_libjpeg_turbo=false skia_use_system_zlib=false skia_use_icu=false skia_use_expat=false skia_use_libwebp_decode=false skia_use_libwebp_encode=false skia_use_xps=false skia_enable_pdf=false is_debug=false"
   > ninja -C out/Release
   
（2）编译skia(Debug版，非官方版本，完整，生成使用Visual Studio 2022工程)
   > .\bin\gn.exe gen out/Debug --ide="vs2022" --sln="skia" --args="is_debug=true extra_cflags=[\"/MTd\"]"
   > ninja -C out/Debug
   
5、为何使用LLVM编译Skia：因为LLVM编译的代码，执行性能明显比VS好。用VS编译的代码，运行时有明显卡顿现象。
